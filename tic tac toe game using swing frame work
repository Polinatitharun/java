package tictactoegui;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class TicTacToeGUI {
    private JFrame frame; //used to create a frame
    private JButton[][] buttons;  //used to create a button
    private char currentPlayer = 'X';  //set x for current player

    public TicTacToeGUI() { //complete code to create frame 
        frame = new JFrame("Tic Tac Toe"); //set title for frame
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //automatically close the window
        frame.setSize(300, 300); //set sizes for the window
        frame.setLayout(new GridLayout(3, 3));  //create a game 3*3 frame
        JOptionPane.showMessageDialog(null,"lets play a game and chill it");
JOptionPane.showMessageDialog(null,"welcome to tic tac toe\n AUthor :Tharun polinati");
JOptionPane.showMessageDialog(null,"Instructions :\n1.team contain two players 1.x 2.0\n2.each one take chance after finishing of another one\n3.select particular grid to place your choice");

        buttons = new JButton[3][3];  //initialize 3*3 buttons

        for (int i = 0; i < 3; i++) {  //loop through matrix row
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton(); //loop through matrix column
                buttons[i][j].setFont(new Font(Font.SANS_SERIF, Font.BOLD, 50)); //setting font to enter current player
                buttons[i][j].addActionListener(new ButtonClickListener(i, j)); //add the user  clicked indices to the button
                frame.add(buttons[i][j]); //adding all buttons to the frame
            }
        }

        frame.setVisible(true);   //used to make the frame visible in window
    }// frame code unto here

    private void checkWin() {
        // Check rows, columns, and diagonals for a win
        for (int i = 0; i < 3; i++) {
            if (buttons[i][0].getText().equals(buttons[i][1].getText()) &&  //used to check the user wins in row or not		
            buttons[i][0].getText().equals(buttons[i][2].getText()) &&
                !buttons[i][0].getText().equals("")) {
                highlightWinningCells(buttons[i][0], buttons[i][1], buttons[i][2]);
                JOptionPane.showMessageDialog(null, "Player " + buttons[i][0].getText() + " wins!");
                currentPlayer = ' ';
                return;
            }
            if (buttons[0][i].getText().equals(buttons[1][i].getText()) &&    //used to check the user wins in column or not
                buttons[0][i].getText().equals(buttons[2][i].getText()) &&
                !buttons[0][i].getText().equals("")) {
                highlightWinningCells(buttons[0][i], buttons[1][i], buttons[2][i]);
                JOptionPane.showMessageDialog(null, "Player " + buttons[0][i].getText() + " wins!");
                currentPlayer = ' ';
                return;
            }
        }

        if (buttons[0][0].getText().equals(buttons[1][1].getText()) &&
            buttons[0][0].getText().equals(buttons[2][2].getText()) && //used to check the diagonal wins
            !buttons[0][0].getText().equals("")) {
            highlightWinningCells(buttons[0][0], buttons[1][1], buttons[2][2]);
            JOptionPane.showMessageDialog(null, "Player " + buttons[0][0].getText() + " wins!");
            currentPlayer = ' ';
            return;
        }

        if (buttons[0][2].getText().equals(buttons[1][1].getText()) &&
            buttons[0][2].getText().equals(buttons[2][0].getText()) &&
            !buttons[0][2].getText().equals("")) {
            highlightWinningCells(buttons[0][2], buttons[1][1], buttons[2][0]);
            JOptionPane.showMessageDialog(null, "Player " + buttons[0][2].getText() + " wins!");
            currentPlayer = ' ';
            return;
        }

        if (isBoardFull()) {
            JOptionPane.showMessageDialog(null, "It's a tie! you both can try again");
            currentPlayer = ' ';
        }
    }

    private void highlightWinningCells(JButton b1, JButton b2, JButton b3) {
        b1.setBackground(Color.RED);
        b2.setBackground(Color.RED);
        b3.setBackground(Color.RED);
    }

    private boolean isBoardFull() { //to check the board is filled or not
    	for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j].getText().equals("")) {
                    return false; // There's an empty space
                }
            }
        }
        return true; // The board is full
    }

    private class ButtonClickListener implements ActionListener {
        private int row;   //add the button clicked area indices to the row and column
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public void actionPerformed(ActionEvent e) {
            if (buttons[row][col].getText().equals("") && currentPlayer != ' ') {
                buttons[row][col].setText(Character.toString(currentPlayer));
                checkWin();
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new TicTacToeGUI();
            }
        });
    }
}
